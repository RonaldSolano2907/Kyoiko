--Tablas
-- Tabla Asignacion
CREATE TABLE Asignacion (
    IDMateria NUMBER,
    CedulaProfesor  NUMBER,
    Semestre NUMBER(4),
    Año NUMBER(4),
    CONSTRAINT PK_Asignacion PRIMARY KEY (IDMateria, CedulaProfesor, Semestre, Año),
    CONSTRAINT FK_Asignacion_Materia FOREIGN KEY (IDMateria) REFERENCES Materia(ID),
    CONSTRAINT FK_Asignacion_Profesor FOREIGN KEY (CedulaProfesor) REFERENCES Profesor(Cedula)
);

INSERT INTO Asignacion (IDMateria, CedulaProfesor, Semestre, Año)
VALUES (1, 123456, 2024, 1);

INSERT INTO Asignacion (IDMateria, CedulaProfesor, Semestre, Año)
VALUES (2, 234567, 2024, 1);

INSERT INTO Asignacion (IDMateria, CedulaProfesor, Semestre, Año)
VALUES (3, 345678, 2024, 2);

INSERT INTO Asignacion (IDMateria, CedulaProfesor, Semestre, Año)
VALUES (4, 456789, 2024, 2);

INSERT INTO Asignacion (IDMateria, CedulaProfesor, Semestre, Año)
VALUES (5, 567890, 2024, 1);


-- Tabla Congelamientos
CREATE TABLE Congelamientos (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CedulaEstudiante VARCHAR2(50),
    Motivo CLOB,
    FechaInicio DATE,
    FechaFin DATE,
    CONSTRAINT FK_Congelamientos_Estudiante FOREIGN KEY (CedulaEstudiante) REFERENCES Estudiante(Cedula)
);



-- Tabla Departamento
CREATE TABLE Departamento (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CedulaJefeDepartamento NUMBER,
    Nombre VARCHAR2(100) NOT NULL,
    Descripcion CLOB
);
    ALTER TABLE Departamento
    ADD CONSTRAINT FK_Departamento_Profesor FOREIGN KEY (CedulaJefeDepartamento) REFERENCES Profesor(Cedula)
    
-- Tabla Direccion
CREATE TABLE Direccion (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CedulaEstudiante VARCHAR2(50),
    Provincia VARCHAR2(50),
    Canton VARCHAR2(50),
    Distrito VARCHAR2(50),
    DireccionExacta CLOB,
    CONSTRAINT FK_Direccion_Estudiante FOREIGN KEY (CedulaEstudiante) REFERENCES Estudiante(Cedula)
);

INSERT INTO Direccion (CedulaEstudiante, Provincia, Canton, Distrito, DireccionExacta)
VALUES ('123456789', 'San José', 'Central', 'Carmen', 'Calle 15, Casa 45');

INSERT INTO Direccion (CedulaEstudiante, Provincia, Canton, Distrito, DireccionExacta)
VALUES ('234567890', 'Alajuela', 'Central', 'Alajuela', 'Avenida 3, Edificio B');

INSERT INTO Direccion (CedulaEstudiante, Provincia, Canton, Distrito, DireccionExacta)
VALUES ('345678901', 'Heredia', 'Central', 'San Francisco', 'Calle 7, Casa 10');

INSERT INTO Direccion (CedulaEstudiante, Provincia, Canton, Distrito, DireccionExacta)
VALUES ('456789012', 'Cartago', 'Central', 'Cartago', 'Avenida 2, Edificio A');

INSERT INTO Direccion (CedulaEstudiante, Provincia, Canton, Distrito, DireccionExacta)
VALUES ('567890123', 'Puntarenas', 'Central', 'Puntarenas', 'Calle 12, Apartamento 3');


-- Tabla Estudiante
CREATE TABLE Estudiante (
    Cedula VARCHAR2(50) PRIMARY KEY,
    Nombre VARCHAR2(50) NOT NULL,
    Apellidos VARCHAR2(50) NOT NULL,
    Telefono VARCHAR2(15),
    FechaNacimiento DATE,
    CorreoElectronico VARCHAR2(100),
    FechaInscripcion DATE,
    Estado VARCHAR2(10) DEFAULT 'activo' CHECK (Estado IN ('activo', 'inactivo'))
);

INSERT INTO Estudiante (Cedula, Nombre, Apellidos, Telefono, FechaNacimiento, CorreoElectronico, FechaInscripcion, Estado)
VALUES ('123456789', 'Juan', 'Pérez', '555-1234', TO_DATE('2000-05-15', 'YYYY-MM-DD'), 'juan.perez@mail.com', TO_DATE('2024-01-15', 'YYYY-MM-DD'), 'activo');

INSERT INTO Estudiante (Cedula, Nombre, Apellidos, Telefono, FechaNacimiento, CorreoElectronico, FechaInscripcion, Estado)
VALUES ('234567890', 'María', 'González', '555-2345', TO_DATE('2001-06-10', 'YYYY-MM-DD'), 'maria.gonzalez@mail.com', TO_DATE('2024-02-01', 'YYYY-MM-DD'), 'activo');

INSERT INTO Estudiante (Cedula, Nombre, Apellidos, Telefono, FechaNacimiento, CorreoElectronico, FechaInscripcion, Estado)
VALUES ('345678901', 'Carlos', 'Sánchez', '555-3456', TO_DATE('1999-07-20', 'YYYY-MM-DD'), 'carlos.sanchez@mail.com', TO_DATE('2024-03-10', 'YYYY-MM-DD'), 'inactivo');

INSERT INTO Estudiante (Cedula, Nombre, Apellidos, Telefono, FechaNacimiento, CorreoElectronico, FechaInscripcion, Estado)
VALUES ('456789012', 'Ana', 'Martínez', '555-4567', TO_DATE('2000-08-25', 'YYYY-MM-DD'), 'ana.martinez@mail.com', TO_DATE('2024-04-05', 'YYYY-MM-DD'), 'activo');

INSERT INTO Estudiante (Cedula, Nombre, Apellidos, Telefono, FechaNacimiento, CorreoElectronico, FechaInscripcion, Estado)
VALUES ('567890123', 'Luis', 'Fernández', '555-5678', TO_DATE('2001-09-30', 'YYYY-MM-DD'), 'luis.fernandez@mail.com', TO_DATE('2024-05-20', 'YYYY-MM-DD'), 'activo');


-- Tabla Horarios
CREATE TABLE Horarios (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    IDMateria NUMBER,
    Aula VARCHAR2(20),
    HorarioInicio TIMESTAMP,
    HorarioFin TIMESTAMP,
    DiaSemana VARCHAR2(10) CHECK (DiaSemana IN ('Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo')),
    CONSTRAINT FK_Horarios_Materia FOREIGN KEY (IDMateria) REFERENCES Materia(ID)
);

-- Tabla Materia
CREATE TABLE Materia (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(100) NOT NULL,
    Descripcion CLOB,
    Creditos NUMBER NOT NULL
);

-- Tabla Matricula
CREATE TABLE Matricula (
    CedulaEstudiante VARCHAR2(50),
    IDMateria NUMBER,
    Semestre NUMBER,
    Año NUMBER,
    FechaMatricula DATE,
    CONSTRAINT PK_Matricula PRIMARY KEY (CedulaEstudiante, IDMateria, Semestre, Año),
    CONSTRAINT FK_Matricula_Estudiante FOREIGN KEY (CedulaEstudiante) REFERENCES Estudiante(Cedula),
    CONSTRAINT FK_Matricula_Materia FOREIGN KEY (IDMateria) REFERENCES Materia(ID)
);

-- Tabla Prerrequisitos
CREATE TABLE Prerrequisitos (
    IDMateriaPrincipal NUMBER,
    IDMateriaPrerrequisito NUMBER,
    CONSTRAINT PK_Prerrequisitos PRIMARY KEY (IDMateriaPrincipal, IDMateriaPrerrequisito),
    CONSTRAINT FK_Prerrequisitos_Principal FOREIGN KEY (IDMateriaPrincipal) REFERENCES Materia(ID),
    CONSTRAINT FK_Prerrequisitos_Prerrequisito FOREIGN KEY (IDMateriaPrerrequisito) REFERENCES Materia(ID)
);

-- Tabla Profesor
CREATE TABLE Profesor (
    Cedula NUMBER PRIMARY KEY,
    IDDepartamento NUMBER,
    Nombre VARCHAR2(50) NOT NULL,
    Apellidos VARCHAR2(50) NOT NULL,
    Telefono VARCHAR2(15),
    CorreoElectronico VARCHAR2(100),
    FechaInscripcion DATE,
    TituloAcademico VARCHAR2(100),
    CONSTRAINT FK_Profesor_Departamento FOREIGN KEY (IDDepartamento) REFERENCES Departamento(ID)
);

INSERT INTO Profesor (Cedula, IDDepartamento, Nombre, Apellidos, Telefono, CorreoElectronico, FechaInscripcion, TituloAcademico)
VALUES (123456, 1, 'Carlos', 'Méndez', '555-1122', 'carlos.mendez@mail.com', TO_DATE('2018-08-10', 'YYYY-MM-DD'), 'Licenciado en Matemáticas');

INSERT INTO Profesor (Cedula, IDDepartamento, Nombre, Apellidos, Telefono, CorreoElectronico, FechaInscripcion, TituloAcademico)
VALUES (234567, 2, 'Ana', 'Vargas', '555-2233', 'ana.vargas@mail.com', TO_DATE('2019-09-15', 'YYYY-MM-DD'), 'Licenciada en Historia');

INSERT INTO Profesor (Cedula, IDDepartamento, Nombre, Apellidos, Telefono, CorreoElectronico, FechaInscripcion, TituloAcademico)
VALUES (345678, 3, 'Luis', 'Ramírez', '555-3344', 'luis.ramirez@mail.com', TO_DATE('2020-01-05', 'YYYY-MM-DD'), 'Licenciado en Física');

INSERT INTO Profesor (Cedula, IDDepartamento, Nombre, Apellidos, Telefono, CorreoElectronico, FechaInscripcion, TituloAcademico)
VALUES (456789, 4, 'Patricia', 'Jiménez', '555-4455', 'patricia.jimenez@mail.com', TO_DATE('2017-12-20', 'YYYY-MM-DD'), 'Doctora en Biología');

INSERT INTO Profesor (Cedula, IDDepartamento, Nombre, Apellidos, Telefono, CorreoElectronico, FechaInscripcion, TituloAcademico)
VALUES (567890, 5, 'José', 'González', '555-5566', 'jose.gonzalez@mail.com', TO_DATE('2021-02-25', 'YYYY-MM-DD'), 'Licenciado en Ciencias de la Computación');


     
--Funciones

-- calcular_asistencia

CREATE OR REPLACE FUNCTION calcular_asistencia(estudiante_id NUMBER)
RETURN NUMBER IS
    total_asistencia NUMBER;
BEGIN
    SELECT SUM(asistencias)
    INTO total_asistencia
    FROM asistencias
    WHERE cedula_estudiante = estudiante_id;

    RETURN NVL(total_asistencia, 0);
END;


--calcular_cantidad_materias_semestre
CREATE FUNCTION calcular_cantidad_materias_semestre(estudiante_id VARCHAR2(50), semestre NUMBER(4), Año NUMBER(4)) RETURNS NUMBER
BEGIN
    DECLARE total_materias NUMBER;
    SELECT COUNT(*) INTO total_materias FROM matriculas WHERE cedula_estudiante = estudiante_id AND semestre = semestre AND Año = Año;
    RETURN total_materias;
END;

--calcular_promedio_notas
CREATE FUNCTION calcular_promedio_notas(estudiante_id INT) RETURNS FLOAT
BEGIN
    DECLARE promedio FLOAT;
    SELECT AVG(nota) INTO promedio FROM notas WHERE cedula_estudiante = estudiante_id;
    RETURN promedio;
END;

--contar_congelamientos_activos
CREATE FUNCTION contar_congelamientos_activos(estudiante_id INT) RETURNS INT
BEGIN
    DECLARE total_congelamientos INT;
    SELECT COUNT(*) INTO total_congelamientos FROM congelamientos WHERE cedula_estudiante = estudiante_id AND (fecha_fin IS NULL OR fecha_fin > CURRENT_DATE);
    RETURN total_congelamientos;
END;

--contar_estudiantes_materia
CREATE FUNCTION contar_estudiantes_materia(materia_id INT) RETURNS INT
BEGIN
    DECLARE total_estudiantes INT;
    SELECT COUNT(*) INTO total_estudiantes FROM matriculas WHERE id_materia = materia_id;
    RETURN total_estudiantes;
END;

--contar_materias_profesor
CREATE FUNCTION contar_materias_profesor(profesor_id INT) RETURNS INT
BEGIN
    DECLARE total_materias INT;
    SELECT COUNT(*) INTO total_materias FROM asignaciones WHERE cedula_profesor = profesor_id;
    RETURN total_materias;
END;

--listar_estudiantes_congelamiento
CREATE FUNCTION listar_estudiantes_congelamiento() RETURNS TEXT
BEGIN
    DECLARE estudiantes TEXT;
    SELECT GROUP_CONCAT(cedula) INTO estudiantes FROM estudiantes WHERE congelamiento_activo = TRUE;
    RETURN estudiantes;
END;

--listar_materias_estudiante
CREATE FUNCTION listar_materias_estudiante(estudiante_id INT) RETURNS TEXT
BEGIN
    DECLARE materias TEXT;
    SELECT GROUP_CONCAT(nombre_materia) INTO materias 
    FROM materias m JOIN matriculas mat ON m.id = mat.id_materia 
    WHERE mat.cedula_estudiante = estudiante_id;
    RETURN materias;
END;

--obtener_horario_materia
CREATE FUNCTION obtener_horario_materia(materia_id INT) RETURNS TEXT
BEGIN
    DECLARE horario TEXT;
    SELECT CONCAT(hora_inicio, ' - ', hora_fin) INTO horario FROM horarios WHERE id_materia = materia_id;
    RETURN horario;
END;

--obtener_prerrequisitos
CREATE FUNCTION obtener_prerrequisitos(materia_id INT) RETURNS TEXT
BEGIN
    DECLARE prerrequisitos TEXT;
    SELECT GROUP_CONCAT(nombre) INTO prerrequisitos 
    FROM materias m JOIN prerrequisitos p ON m.id = p.id_materia_prerrequisito
    WHERE p.id_materia_principal = materia_id;
    RETURN prerrequisitos;
END;

--validar_estudiante_activo
CREATE FUNCTION validar_estudiante_activo(estudiante_id INT) RETURNS BOOLEAN
BEGIN
    DECLARE activo BOOLEAN DEFAULT FALSE;
    SELECT estado INTO activo FROM estudiantes WHERE cedula = estudiante_id;
    RETURN activo;
END;

--validar_prerrequisitos
CREATE FUNCTION validar_prerrequisitos(estudiante_id INT, materia_id INT) RETURNS BOOLEAN
BEGIN
    DECLARE cumple_prerrequisitos BOOLEAN DEFAULT TRUE;
    DECLARE prerrequisito_id INT;

    DECLARE cur CURSOR FOR 
        SELECT id_materia_prerrequisito 
        FROM prerrequisitos 
        WHERE id_materia_principal = materia_id;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET cumple_prerrequisitos = FALSE;

    OPEN cur;

    prerrequisito_loop: LOOP
        FETCH cur INTO prerrequisito_id;
        
        IF NOT EXISTS (
            SELECT 1 
            FROM materias_aprobadas 
            WHERE cedula_estudiante = estudiante_id 
              AND id_materia = prerrequisito_id
        ) THEN
            SET cumple_prerrequisitos = FALSE;
            LEAVE prerrequisito_loop;
        END IF;
    END LOOP;

    CLOSE cur;

    RETURN cumple_prerrequisitos;
END;

--verificar_disponibilidad_profesor
CREATE FUNCTION verificar_disponibilidad_profesor(profesor_id INT, horario_id INT) RETURNS BOOLEAN
BEGIN
    DECLARE disponible BOOLEAN DEFAULT TRUE;

    IF EXISTS (
        SELECT 1 
        FROM asignaciones 
        WHERE cedula_profesor = profesor_id 
          AND id_horario = horario_id
    ) THEN
        SET disponible = FALSE;
    END IF;

    RETURN disponible;
END;

--verificar_estado_matricula
CREATE FUNCTION verificar_estado_matricula(estudiante_id INT) RETURNS BOOLEAN
BEGIN
    DECLARE estado BOOLEAN;
    SELECT estado INTO estado FROM matriculas WHERE cedula_estudiante = estudiante_id;
    RETURN estado;
END;

--verificar_requisitos_matricula
CREATE FUNCTION verificar_requisitos_matricula(estudiante_id INT, materia_id INT) RETURNS BOOLEAN
BEGIN
    DECLARE cumple_requisitos BOOLEAN DEFAULT TRUE;
    DECLARE prerrequisito_id INT;

    DECLARE cur CURSOR FOR 
        SELECT id_materia_prerrequisito 
        FROM prerrequisitos 
        WHERE id_materia_principal = materia_id;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET cumple_requisitos = FALSE;

    OPEN cur;

    requisitos_loop: LOOP
        FETCH cur INTO prerrequisito_id;
        
        IF NOT EXISTS (
            SELECT 1 
            FROM materias_aprobadas 
            WHERE cedula_estudiante = estudiante_id 
              AND id_materia = prerrequisito_id
        ) THEN
            SET cumple_requisitos = FALSE;
            LEAVE requisitos_loop;
        END IF;
    END LOOP;

    CLOSE cur;

    RETURN cumple_requisitos;
END;

--Triggers

--actualizar_asistencia
CREATE TRIGGER actualizar_asistencia
AFTER INSERT ON asistencias
FOR EACH ROW
BEGIN
    UPDATE estudiantes
    SET total_asistencia = (SELECT SUM(asistencias) FROM asistencias WHERE cedula_estudiante = NEW.cedula_estudiante)
    WHERE cedula = NEW.cedula_estudiante;
END;

CREATE TRIGGER actualizar_asistencia_update
AFTER UPDATE ON asistencias
FOR EACH ROW
BEGIN
    UPDATE estudiantes
    SET total_asistencia = (SELECT SUM(asistencias) FROM asistencias WHERE cedula_estudiante = NEW.cedula_estudiante)
    WHERE cedula = NEW.cedula_estudiante;
END;

--cupo_materia
CREATE TRIGGER cupo_materia
BEFORE INSERT ON matriculas
FOR EACH ROW
BEGIN
    DECLARE cupo_actual INT;
    DECLARE cupo_maximo INT;

    SELECT COUNT(*) INTO cupo_actual FROM matriculas WHERE id_materia = NEW.id_materia;
    SELECT cupo INTO cupo_maximo FROM materias WHERE id = NEW.id_materia;

    IF cupo_actual >= cupo_maximo THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No hay cupo disponible en la materia';
    END IF;
END;

--estado_estudiante
CREATE TRIGGER estado_estudiante
AFTER INSERT ON congelamientos
FOR EACH ROW
BEGIN
    UPDATE estudiantes
    SET estado = 'inactivo'
    WHERE cedula = NEW.cedula_estudiante;
END;

CREATE TRIGGER finalizar_congelamiento
AFTER UPDATE ON congelamientos
FOR EACH ROW
BEGIN
    IF NEW.fecha_fin IS NOT NULL THEN
        UPDATE estudiantes
        SET estado = 'activo'
        WHERE cedula = NEW.cedula_estudiante;
    END IF;
END;

--limitar_asignaciones
CREATE TRIGGER limitar_asignaciones
BEFORE INSERT ON asignaciones
FOR EACH ROW
BEGIN
    DECLARE total_asignaciones INT;

    SELECT COUNT(*) INTO total_asignaciones
    FROM asignaciones
    WHERE cedula_profesor = NEW.cedula_profesor
      AND semestre = NEW.semestre
      AND aÃ±o = NEW.aÃ±o;

    IF total_asignaciones >= 3 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El profesor ya tiene el mÃ¡ximo de asignaciones permitidas en este semestre';
    END IF;
END;

--prerrequisitos_inscripcion
CREATE TRIGGER prerrequisitos_inscripcion
BEFORE INSERT ON matriculas
FOR EACH ROW
BEGIN
    DECLARE cumple BOOLEAN DEFAULT TRUE;
    DECLARE prerrequisito_id INT;

    DECLARE cur CURSOR FOR 
        SELECT id_materia_prerrequisito 
        FROM prerrequisitos 
        WHERE id_materia_principal = NEW.id_materia;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET cumple = FALSE;

    OPEN cur;

    verificar_loop: LOOP
        FETCH cur INTO prerrequisito_id;
        IF NOT cumple THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No cumple con los prerrequisitos';
            LEAVE verificar_loop;
        END IF;
        
        IF NOT EXISTS (
            SELECT 1 
            FROM materias_aprobadas 
            WHERE cedula_estudiante = NEW.cedula_estudiante 
              AND id_materia = prerrequisito_id
        ) THEN
            SET cumple = FALSE;
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No cumple con los prerrequisitos';
            LEAVE verificar_loop;
        END IF;
    END LOOP;

    CLOSE cur;
END;


--Vistas

--vista_congelamientos_activos
CREATE VIEW vista_congelamientos_activos AS
SELECT e.cedula, 
       e.nombre, 
       e.apellido, 
       c.fecha_inicio, 
       c.fecha_fin
FROM estudiante e
JOIN congelamientos c ON e.cedula = c.cedula_estudiante
WHERE c.fecha_fin IS NULL OR c.fecha_fin > TRUNC(SYSDATE);


--vista_departamentos_profesores
CREATE VIEW vista_departamentos_profesores AS
SELECT d.nombre AS departamento, p.nombre AS profesor, p.apellido
FROM departamentos d
JOIN profesores p ON d.cedula_jefe = p.cedula;

--vista_estudiantes_departamento
CREATE VIEW vista_estudiantes_departamento AS
SELECT d.nombre AS departamento, e.cedula, e.nombre, e.apellido
FROM departamentos d
JOIN estudiantes e ON d.id = e.id_departamento;

--vista_estudiantes_matriculados
CREATE VIEW vista_estudiantes_matriculados AS
SELECT e.cedula, e.nombre, e.apellido, m.nombre_materia, mat.semestre, mat.aÃ±o
FROM estudiantes e
JOIN matriculas mat ON e.cedula = mat.cedula_estudiante
JOIN materias m ON mat.id_materia = m.id;

--vista_historial_matricula
CREATE VIEW vista_historial_matricula AS
SELECT e.cedula, e.nombre, e.apellido, m.nombre_materia, mat.fecha_matricula, mat.semestre, mat.aÃ±o
FROM estudiantes e
JOIN matriculas mat ON e.cedula = mat.cedula_estudiante
JOIN materias m ON mat.id_materia = m.id;

--vista_horarios_clases
CREATE VIEW vista_horarios_clases AS
SELECT m.nombre AS materia, h.aula, h.hora_inicio, h.hora_fin, h.dia_semana
FROM horarios h
JOIN materias m ON h.id_materia = m.id;

--vista_materias_inscritos
CREATE VIEW vista_materias_inscritos AS
SELECT m.nombre AS materia, COUNT(mat.cedula_estudiante) AS inscritos
FROM materias m
LEFT JOIN matriculas mat ON m.id = mat.id_materia
GROUP BY m.nombre;

--vista_materias_prerrequisitos
CREATE VIEW vista_materias_prerrequisitos AS
SELECT m.nombre AS materia, p.nombre AS prerrequisito
FROM prerrequisitos pr
JOIN materias m ON pr.id_materia_principal = m.id
JOIN materias p ON pr.id_materia_prerrequisito = p.id;

--vista_profesores_asignados
CREATE VIEW vista_profesores_asignados AS
SELECT p.cedula, p.nombre, p.apellido, m.nombre_materia, a.semestre, a.aÃ±o
FROM profesores p
JOIN asignaciones a ON p.cedula = a.cedula_profesor
JOIN materias m ON a.id_materia = m.id;

--vista_profesores_materias
CREATE VIEW vista_profesores_materias AS
SELECT p.cedula, p.nombre, p.apellido, COUNT(a.id_materia) AS numero_materias
FROM profesores p
LEFT JOIN asignaciones a ON p.cedula = a.cedula_profesor
GROUP BY p.cedula, p.nombre, p.apellido;
